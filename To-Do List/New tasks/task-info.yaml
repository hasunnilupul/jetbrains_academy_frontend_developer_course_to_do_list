type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Document</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const path = require('path');
    // '..' since we're in the test/ subdirectory; learner is supposed to have src/index.html
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
    const hs = require('hs-test-web');
    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    async function stageTest() {

        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args: ['--start-maximized', '--disable-infobar'],
            ignoreDefaultArgs: ['--enable-automation']
        });

        const page = await browser.newPage();
        await page.goto(pagePath);

        await sleep(1000);

        let result = await hs.testPage(page,
            // Test #1 - Check title
            () => {
                if (document.title !== 'To-Do List') {
                    return hs.wrong("The title of the page should be 'To-Do List'")
                }
                return hs.correct();
            },

            // Test #2 - Check elements
            () => {
                const inputField = document.getElementById("input-task")
                if (inputField === null || inputField.tagName !== 'INPUT')
                    return hs.wrong("Can't find input field with id '#input-task'")

                const addButton = document.getElementById("add-task-button")
                if (addButton === null || addButton.tagName !== 'BUTTON')
                    return hs.wrong("Can't find button with id '#add-task-button'")

                this.taskList = document.getElementById("task-list")
                if (this.taskList === null || this.taskList.tagName !== 'UL')
                    return hs.wrong("Can't find <ul> tag with id '#task-list'")

                return hs.correct();
            },

            // Test #3 - Check each task in task list
            () => {

                const tasks = this.taskList.getElementsByTagName("li")
                if (tasks.length !== 3)
                    return hs.wrong("Inside the <ul> tag should be 3 <li> elements!")

                for (let task of tasks) {
                    const checkbox = task.querySelector("input[type=checkbox]")
                    if (checkbox === null)
                        return hs.wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <span> tag with 'task' class")

                    const deleteButton = task.querySelector("button.delete-btn")
                    if (deleteButton === null)
                        return hs.wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                }

                return hs.correct();
            },

            // Test #4 - Test adding new task
            () => {

                const inputField = document.getElementById("input-task")
                if (inputField.tagName !== 'INPUT')
                    return hs.wrong("Can't find input field with id '#input-task'")

                inputField.value = "New task for the test purpose"

                const addButton = document.getElementById("add-task-button")
                if (addButton.tagName !== 'BUTTON')
                    return hs.wrong("Can't find button with id '#add-task-button'")

                addButton.click()

                const tasks = this.taskList.getElementsByTagName("li")
                if (tasks.length !== 4)
                    return hs.wrong("After adding a new task to the To-Do list, there should be 4 <li> tags inside the <ul> list")

                for (let task of tasks) {

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === "New task for the test purpose") {
                        return hs.correct()
                    }
                }

                return hs.wrong("Can't find task with name 'New task for the test purpose'.\n" +
                    "The task name should be placed in <span> tag with class 'task'!")
            },

            // Test #5 - Deleting task
            () => {

                let tasks = this.taskList.getElementsByTagName("li")

                for (let task of tasks) {
                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === "New task for the test purpose") {
                        const deleteButton = task.querySelector("button.delete-btn")
                        if (deleteButton === null)
                            return hs.wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                        deleteButton.click()
                        break
                    }
                }

                tasks = this.taskList.getElementsByTagName("li")

                for (let task of tasks) {
                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === "New task for the test purpose") {
                        return hs.wrong("After deleting a task with name 'New task for the test purpose' it is still in the task list!")
                    }
                }

                return hs.correct()
            }
        );

        await browser.close();
        return result;
    }


    jest.setTimeout(30000);
    test("Test stage", async () => {
            let result = await stageTest();
            if (result['type'] === 'wrong') {
                fail(result['message']);
            }
        }
    );
  learner_created: false
- name: src/assets/css/style.css
  visible: true
  text: |-
    * {
        box-sizing: border-box;
    }

    ul{
        list-style: none;
        padding-left: 0;
    }

    button {
        border: none;
        cursor: pointer;
    }

    body{
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 1rem 4rem;
    }

    header{
        font-size: 2rem;
        font-weight: bold;
    }

    main{
        margin-top: 1rem;
        width: 95%;
    }

    .sr-hidden{
        visibility: hidden;
    }

    .h-5{
        height: 1.25rem;
    }

    .w-5{
        width: 1.25rem;
    }

    .new-task-container {
        display: flex;
        flex-direction: row;
        flex-grow: 1;
    }

    #input-task{
        flex-grow: 1;
        margin-right: .5rem;
        padding: 0;
        border: solid transparent 0;
        border-bottom: solid lightgray .15rem;
        font-size: 1rem;
        font-weight: normal;
        color: dimgray;
    }

    #input-task:focus-visible{
        outline: none;
    }

    #add-task-button{
        padding: 0.4rem 0.5rem;
        font-weight: bold;
        color: white;
        background-color: rgba(128, 0, 128, .7);
        border-radius: 5px;
        cursor: pointer;
    }

    #add-task-button:disabled{
        background-color: rgba(128, 0, 128, .2);
        cursor: not-allowed;
    }

    .task-item{
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        margin-bottom: .8rem;
    }

    .task-item > #task-complete{
        flex-grow: 0;
        flex-shrink: 0;
    }

    .task-item .task{
        flex-grow: 1;
        margin: 0 1rem;
    }

    .task-item .delete-btn{
        padding: 0;
        background-color: transparent;
        color: red;
    }
  learner_created: true
- name: src/assets/js/scripts.js
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13195#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 03 Apr 2022 10:51:30 UTC
record: 2
